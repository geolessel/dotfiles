#+TITLE: Geo's emacs config
#+AUTHOR: Geoffrey Lessel

* Startup

Things that need to happen right away.

** Increase garbage collector threshold
   The default is 800kB and increasing it will speed up startup time.
   Before we're done with the config though, we need to put it back down.

    #+BEGIN_SRC emacs-lisp
    (setq gc-cons-threshold 10000000)
      ;; restore after startup
      (add-hook 'after-init-hook
        (lambda ()
          (setq gc-cons-threshold 1000000)
            (message "gc-cons-threshold restored to %S" gc-cons-threshold)))
    #+END_SRC

** Bootstrap `straight` package manager
    #+BEGIN_SRC emacs-lisp
    (defvar bootstrap-version)
    (let
    ((bootstrap-file
    (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
    (bootstrap-version 5))
    (unless
    (file-exists-p bootstrap-file)
    (with-current-buffer
    (url-retrieve-synchronously
                "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
                'silent 'inhibit-cookies)
    (goto-char
    (point-max))
    (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))
    #+END_SRC

** `use-package`
    #+BEGIN_SRC emacs-lisp
    (straight-use-package 'use-package)
    #+END_SRC

*** Syntax example
    #+BEGIN_SRC emacs-lisp :tangle no
    (use-package package-name      ; use the package package-name
      :straight t                  ; use straight to manage it
      :init                        ; execute code BEFORE package load
      (setq foo-variable t)
      :config                      ; execute code AFTER package load
      (foo-mode 1)
    )
    #+END_SRC

*** Always install a package if it's not available
    #+BEGIN_SRC emacs-lisp
(require 'use-package-ensure)
(setq use-package-always-ensure t)
#+END_SRC


* Emacs general system settings

Configurations around Emacs itself (i.e. not from a package).

** Don't show startup message
    #+BEGIN_SRC emacs-lisp
    (setq inhibit-startup-message t)
    #+END_SRC

** Specify backup directory
    #+BEGIN_SRC emacs-lisp
    (setq backup-directory-alist
      '(("." . "~/.emacs-backups"))
      backup-by-copying t   ; don't delink hardlinks
      version-control t     ; use version numbers on backups
      delete-old-versions t ; automatically delete excess backups
      kept-new-versions 20  ; how many of the newest versions to keep
      kept-old-versions 5   ; how many of the old versions to keep
      )
    #+END_SRC

** Use a custom location for "customize" settings

   #+BEGIN_SRC emacs-lisp
   (setq custom-file "~/.emacs.d/custom.el")
   #+END_SRC

** Hide the toolbar
    #+BEGIN_SRC emacs-lisp
    (tool-bar-mode -1)
    #+END_SRC

** Hide the menu bar

    #+BEGIN_SRC emacs-lisp
    (menu-bar-mode -1)
    #+END_SRC

** Hide the scroll bar

    #+BEGIN_SRC emacs-lisp
    (scroll-bar-mode -1)
    #+END_SRC

** Show line numbers in programming mode

    #+BEGIN_SRC emacs-lisp
    (add-hook 'prog-mode-hook 'display-line-numbers-mode)
    #+END_SRC

** Show the matching parens

    #+BEGIN_SRC emacs-lisp
    (show-paren-mode 1)
    #+END_SRC

** Set the default tab width

    #+BEGIN_SRC emacs-lisp
    (setq-default tab-width 2)
    #+END_SRC

** Always use spaces for tabs

    #+BEGIN_SRC emacs-lisp
    (setq-default indent-tabs-mode nil)
    #+END_SRC

** Turn off the error bell

    #+BEGIN_SRC emacs-lisp
    (setq ring-bell-function 'ignore)
    #+END_SRC

** Make the yes/no prompts accept y/n

    #+BEGIN_SRC emacs-lisp
    (defalias 'yes-or-no-p 'y-or-n-p)
    #+END_SRC

** Always delete trailing whitespace

    #+BEGIN_SRC emacs-lisp
    (add-hook 'before-save-hook 'delete-trailing-whitespace)
    #+END_SRC

** Turn on the column display in the modeline

   Sometimes errors report the column as well as the line. So let's
   view the column number we are on!

   #+begin_src emacs-lisp
   (column-number-mode)
   #+end_src


* UI

** Themes
   Doom emacs has some great themes. Let's use them!

    #+BEGIN_SRC emacs-lisp
    (use-package doom-themes
      :straight t)
    #+END_SRC

   Here is the theme to load for this session.

    #+BEGIN_SRC emacs-lisp
    (load-theme 'doom-one-light t) ; t treats it as safe
    #+END_SRC

** Font

   When you have the best font, use the best font.

   #+BEGIN_SRC emacs-lisp
   (set-frame-font "PragmataPro Liga-14" nil t)
   #+END_SRC

   Turn on ligature support in the emacs-mac build.

   #+BEGIN_SRC emacs-lisp
   (mac-auto-operator-composition-mode t)
   #+END_SRC

   #+BEGIN_SRC emacs-lisp :tangle no
   (straight-use-package
     '(font-size :type git :host github :repo "nabeix/emacs-font-size")
     :config
     (font-size-init 18)
     (define-key global-map (kbd "C-=") 'font-size-increase))
   #+END_SRC

** Modeline

   Doom emacs also provides a pretty slick mode line. Let's use that, too.

    #+BEGIN_SRC emacs-lisp
    (use-package doom-modeline
      :straight t
      :hook
      (after-init . doom-modeline-mode)
      :config
      ; use unicode as a fallback (instead of ASCII) when not using icons
      (setq doom-modeline-unicode-fallback t)
      ; don't display the buffer encoding
      (setq doom-modeline-buffer-encoding nil)
      )
    #+END_SRC

** Dashboard

   Doom emacs has a great startup dashboard. Let's use it!

    #+BEGIN_SRC emacs-lisp
    (use-package dashboard
      :straight t
      :config
      (dashboard-setup-startup-hook)
      ; set the title
      (setq dashboard-banner-logo-title "Greetings Geo. Shall we play a game?")
      ; set the banner
      (setq dashboard-startup-banner 'logo)
      ; set the sections I'd like displayed and how many of each
      (setq dashboard-items '((recents . 5) (projects . 5)))
      ; center it all
      (setq dashboard-center-content t)
      ; don't show shortcut keys
      (setq dashboard-show-shortcuts nil)
      ; use nice icons for the files
      (setq dashboard-set-file-icons t)
      ; use nice section icons
      (setq dashboard-set-heading-icons t)
      ; disable the snarky footer
      (setq dashboard-set-footer nil))
    #+END_SRC

** Visualizations

   Display a visual hint when editing with *evil-goggles*.

   #+BEGIN_SRC emacs-lisp
   (use-package evil-goggles
     :straight t
     :after (evil)
     :config
     (evil-goggles-mode)
     )
   #+END_SRC

** Workspaces

   I can use this to work in one project in one perspective/workspace
   and others kept open in other perspectives. After some looking and
   reading, I've decided on `perspective`.

   - [[https://github.com/nex3/perspective-el][Github]]

   Some alternatives I considered:

   - [[https://github.com/Bad-ptr/persp-mode.el][persp-mode]] - a fork of =perspective= and used by Doom Emacs. It is
     possible it will be merged with =perspective= at some point. After
     trying to get keybinding working and failing after a while, I gave up
     on it and preferred =perspective= for its more informative README.
   - [[https://github.com/wasamasa/eyebrowse][eyebrowse]] - supports window layounts but no buffer lists. After I gave
     up on =persp-mode= this was initially my preference.

   #+begin_src emacs-lisp
   (use-package perspective
     :straight t
     :config
     (persp-mode)
     ; sort perspectives by most recently accessed (others: 'name, 'created)
     (setq persp-sort 'access)
     )
   #+end_src


* Modes

** Evil mode

   Make it like vim!

    #+BEGIN_SRC emacs-lisp
    (use-package evil
      :straight t
      :after (evil-leader) ; must be after to get leader available in initial buffers
      :init
      (setq evil-want-integration t)
      (setq evil-want-keybinding nil)
      (setq evil-want-C-u-scroll t) ; use Ctrl-U to scroll up
      :config
      (evil-mode 1)) ; use evil-mode everywhere
    #+END_SRC

*** Use ~<SPC>~ as a leader key

    *evil-leader* provides the =<leader>= feature from Vim that provides
    an easy way to bind keys under a variable prefix key.

    Usage example: bind several keys at once

    #+BEGIN_SRC emacs-lisp :tangle no
    (evil-leader/set-key
      "e" 'find-file
      "b" 'switch-to-buffer
      "k" 'kill-buffer)
    #+END_SRC

    - [[https://github.com/cofi/evil-leader][Github]]

    #+BEGIN_SRC emacs-lisp
    (use-package evil-leader
      :straight t
      :init
      (setq evil-want-integration t)
      (setq evil-want-keybinding nil)
      (setq evil-want-C-u-scroll t) ; use Ctrl-U to scroll up
      :config
      (global-evil-leader-mode)
      (evil-leader/set-leader "<SPC>"))
    #+END_SRC

*** Extra keybindings
    A collection of Evil bindings for the parts of Emacs that Evil does not
    cover properly by default, such as help-mode, M-x calendar, Eshell and more.

    #+BEGIN_SRC emacs-lisp
    (use-package evil-collection
      :straight t
      :after (evil evil-leader)
      :init
      (setq evil-want-keybinding nil)
      :config
      (evil-collection-init))
    #+END_SRC


* Editing

  Things that provide general, non-language specific editing functionality.

** Moving and navigating the buffer

    With *=evil-easymotion=* you can invoke =M=, and this plugin will put a
    target character on every possible position. Type the character on the
    target and wham! you have teleported there.

    #+BEGIN_SRC emacs-lisp
(use-package evil-easymotion
      :straight t
      :after (evil)
      :config
(evilem-default-keybindings "M")
)
#+END_SRC

    *=evil-snipe=* emulates =vim-seek= and/or =vim-sneak= in =evil-mode=.
    It provides 2-character motions for quickly
(and more accurately)
jumping around text, compared
    to evil's built-in f/F/t/T motions, incrementally highlighting candidate targets as you type.

    #+BEGIN_SRC emacs-lisp
(use-package evil-snipe
      :straight t
      :after (evil)
      :config
(evil-snipe-mode +1)
; binds `s`/`S` (forward/backward)
(evil-snipe-override-mode +1)
; binds `f`, `F`, `t`, `T` overrides
(setq evil-snipe-scope 'visible)
; highlights all forward matches in visible buffer
    )
#+END_SRC

** Projects

*** Use *projectile* to manage projects.

   - [[https://projectile.mx/][Home page]]
   - [[https://docs.projectile.mx/projectile/index.html][Manual]]

   #+BEGIN_SRC emacs-lisp
   (use-package projectile
     :straight t
     :bind-keymap
     ("C-c p" . projectile-command-map)
     :config
     (projectile-mode +1))
   #+END_SRC

*** Group buffers by project

    Sometimes it's helpful to see the buffers open grouped by project.
    We can use *ibuffer-projectile* to do that.

    - [[https://github.com/purcell/ibuffer-projectile][Github]]

    #+BEGIN_SRC emacs-lisp
    (use-package ibuffer-projectile
      :straight t
      :config
      (add-hook 'ibuffer-hook
        (lambda ()
          (ibuffer-projectile-set-filter-groups)
          (unless (eq ibuffer-sorting-mode 'alphabetic)
            (ibuffer-do-sort-by-alphabetic)))))
    #+END_SRC

** Commenting

    A Nerd Commenter emulation, help you comment code efficiently. For example,
    you can press =99,ci= to comment out 99 lines.

    Examples:

    - `,ci` comments the current line

    The docs recommend calling ~evilnc-default-hotkeys~ on load to set up
    the keybindings. However, this sets ~C-c p~ which I prefer to save
    for =projectile=.

    [[https://github.com/redguardtoo/evil-nerd-commenter][Github]]

    #+BEGIN_SRC emacs-lisp
    (use-package evil-nerd-commenter
      :straight t
      :after evil
      :bind (
        ("C-c c ;" . evilnc-comment-or-uncomment-lines)
        ("C-c c l" . evilnc-quick-comment-or-uncomment-to-the-line)
        ("C-c c p" . evilnc-comment-or-uncomment-paragraphs)))
    #+END_SRC

** Aligning

   *=evil-lion=* provides =gl= and =gL= align operators: ~gl MOTION CHAR~ and right-align ~gL MOTION CHAR~.
   Use ~CHAR /~ to enter regular expression if a single character wouldn't suffice.
   Use ~CHAR RET~ to align with align.el's default rules for the active major mode.

    #+BEGIN_SRC emacs-lisp
(use-package evil-lion
      :straight t
      :bind
(:map evil-normal-state-map
("g l " . evil-lion-left)
("g L " . evil-lion-right)
:map evil-visual-state-map
("g l " . evil-lion-left)
("g L " . evil-lion-right)))
#+END_SRC

** Change text surrounding selection

   *=evil-surround-mode=* emulates surround.vim by Tim Pope.
   Surround.vim is all about "surroundings": parentheses, brackets, quotes, XML tags, and more. The
   plugin provides mappings to easily delete, change and add such surroundings in pairs.

   It's easiest to explain with examples.

   1. Press ~cs"'~ inside ="Hello world!"= to change it to ='Hello world!'=
   2. Now press ~cs'<q>~ to change it to =<q>Hello world!</q>=
   3. To go full circle, press ~cst"~ to get ="Hello world!"=
   4. To remove the delimiters entirely, press ~ds"~. =Hello world!=
   5. Now with the cursor on ="Hello"=, press ~ysiw]~ (~iw~ is a text object). =[Hello] world!=
   6. Let's make that braces and add some space (use ~}~ instead of ~{~ for no space): ~cs]{~ ={ Hello } world!=
   7. Now wrap the entire line in parentheses with ~yssb~ or ~yss)~. =({ Hello } world!)=
   8. Revert to the original text: ~ds{ds)~ =Hello world!=
   9. Emphasize hello: ~ysiw<em>~ =<em>Hello</em> world!=

    #+BEGIN_SRC emacs-lisp
    (use-package evil-surround
      :straight t
      :after evil
      :config
      (global-evil-surround-mode 1))
    #+END_SRC

** Version control (git)

   *magit* of course.

   - [[https://github.com/magit/magit][Github]]
   - [[https://magit.vc/manual/][Manual]]

   #+BEGIN_SRC emacs-lisp
   (use-package magit
     :straight t
     :bind (
       ("C-c g" . magit-status)))
   #+END_SRC

   *[DISABLED]*
   Highlight changed lines with *diff-hl*.

   - [[https://github.com/dgutov/diff-hl/][Github]]

   #+BEGIN_SRC emacs-lisp :tangle no
   (use-package diff-hl
     :straight t
     :config
     (global-diff-hl-mode))
   #+END_SRC

** Buffers

   Group buffers in ibuffer list by projectile project with *ibuffer-projectile*.

   - [[https://github.com/purcell/ibuffer-projectile][Github]]

   #+BEGIN_SRC emacs-lisp
   (use-package ibuffer-projectile
     :straight t
     :config
     (add-hook 'ibuffer-hook
       (lambda ()
         (ibuffer-projectile-set-filter-groups)
         (unless (eq ibuffer-sorting-mode 'alphabetic)
           (ibuffer-do-sort-by-alphabetic)))))
   #+END_SRC

** Undo

   Even I make mistakes. Emacs' built-in undo system is pretty powerful
   but a little hard to understand. There are other undo packages that
   dumb it down at the expense of functionality, but *undo-tree* tries
   to make that power come easier, especially with tree visualization.

   The documentation for this one (with examples) is in the source code.

   - [[https://www.dr-qubit.org/undo-tree.html][Homepage]]

   #+BEGIN_SRC emacs-lisp
   (use-package undo-tree
     :straight t
     :config
     (global-undo-tree-mode)          ; use it everwhere!
     ;; (setq evil-undo-system 'undo-tree)
     )
   #+END_SRC

** Emojis

   *[DISABLED BECAUSE I DON'T THINK I NEED THIS]*
   *[if I ever enable this again, also check out [[https://github.com/dunn/company-emoji][company-emoji]]]*

   Emacs has pretty good support for emojis built-in. *emojify* makes it
   even better with ascii, unicode, and/or github style emoji support.

   - [[https://github.com/iqbalansari/emacs-emojify][Github]]

   #+BEGIN_SRC emacs-lisp :tangle no
   (use-package emojify
     :straight t
     :init
     ; only unicode and github (not ascii [ e.g. :-) ])
     (setq emojify-set-emoji-styles '(unicode github))
     ; by default emojis are shown as images; I prefer unicode
     (setq emojify-display-style 'unicode)
     :config
     (global-emojify-mode)
     )
   #+END_SRC


* General packages

Things that I couldn't think of a better top-level heading for.

** Packages that provide some help

*** Show available keys for a mode in a popup

    #+BEGIN_SRC emacs-lisp
    (use-package which-key
      :straight t
      :config
      (which-key-mode))
    #+END_SRC

*** An alternative built-in help system

    *helpful* is an alternative to the built-in Emacs help that
    provides much more contextual information.

    - [[https://github.com/Wilfred/helpful][Github]]

    #+BEGIN_SRC emacs-lisp
    (use-package helpful
      :straight t
      :bind (
        ; rebind help keys to use helpful
        ("C-h f" . helpful-callable)
        ("C-h v" . helpful-variable)
        ("C-h k" . helpful-key)
        ; lookup the current symbol at point
        ("C-c C-d" . helpful-at-point)
        ; look up functions (expluding macros)
        ("C-h F" . helpful-function)
        ; look up commands
        ("C-h C" . helpful-command))
      :config
      ; use helpful with ivy
      (setq counsel-describe-function-function #'helpful-callable)
      (setq counsel-describe-variable-function #'helpful-variable))
    #+END_SRC

** Make the minibuffer better

*** Select from a list with Ivy and Counsel

    *ivy* is for quick and easy selection from a list. It
    is provided in the =counsel= package along with =swiper=.

    - [[https://oremacs.com/swiper/][Documentation]]
    - [[https://github.com/abo-abo/swiper][Github]]

    #+BEGIN_SRC emacs-lisp
    (use-package counsel
      :straight t
      :config
      (ivy-mode t)      ; enable ivy-mode everywhere
      (counsel-mode t)  ; enable counsel mode replacements
      (setq ivy-use-virtual-buffers t)
      (setq ivy-count-format "(%d/%d) ")
      (setq ivy-initial-inputs-alist nil)) ; don't start the search with ~^~
    #+END_SRC

**** Make =ivy= prettier

     *ivy-rich* has rich transformers for commands from =ivy= and =counsel=.
     You can defined your own transformers too.

     [[https://github.com/yevgnen/ivy-rich][Github]]

     #+BEGIN_SRC emacs-lisp
     (use-package ivy-rich
       :straight t
       :after (ivy counsel)
       :config
       (ivy-rich-mode 1)
       ; the docs recommend to set this as well
       (setcdr (assq t ivy-format-functions-alist) #'ivy-format-function-line))
     #+END_SRC

**** Use fuzzy finding for counsel

     We have two good choices for filtering results. The first is
     =flx= and the second is =prescient=.

     Currently enabled: Prescient

     *CURRENTLY DISABLED*
     Use *=flx=* to provide some fuzzy matching.

     The default matcher will use a ~.*~ regex wild card in place of
     /each single space/ in the input. If you want to use the fuzzy
     matcher and use a ~.*~ regex wild card between /each input letter/,
     we config with fuzzy. From https://oremacs.com/2016/01/06/ivy-flx/.

     - [[https://github.com/lewang/flx][Github]]

     #+BEGIN_SRC emacs-lisp :tangle no
     (use-package flx
       :straight t
       :after (ivy counsel)
       :config
       (setq ivy-re-builders-alist
         '((ivy-switch-buffer . ivy--regex-plus)
           (t . ivy--regex-fuzzy))))
     #+END_SRC

     *CURRENTLY ENABLED*
     Use *=prescient=* to sort and filter a list of candidates.

     prescient.el takes as input a list of candidates, and a query
     that you type. The query is first split on spaces into subqueries
     (two consecutive spaces match a literal space). Each subquery
     filters the candidates because it must match as either a
     substring of the candidate, a regexp, or an initialism
     (e.g. ffap matches find-file-at-point, and so does fa). The last
     few candidates you selected are displayed first, followed by the
     most frequently selected ones, and then the remaining candidates
     are sorted by length. If you don't like the algorithm used for
     filtering, you can choose a different one by customizing
     prescient-filter-method.

     - [[https://github.com/raxod502/prescient.el][Github]]

     #+BEGIN_SRC emacs-lisp
     (use-package prescient :straight t)
     (use-package ivy-prescient
       :straight t
       :after (ivy counsel prescient)
       :config
       (ivy-prescient-mode t)
       ; describe-variable prescient-filter-method for docs
       (setq prescient-filter-method '(literal regexp fuzzy initialism)))
     #+END_SRC

*** Replace M-x with Amx

    *=amx=* is an alternative interface for ~M-x~ in Emacs. Some
    enhancements include prioritizing your most-used commands in the
    completion list and showing keyboard shortcuts.

    - [[https://github.com/DarwinAwardWinner/amx][Github]]

    Some tips:
    - ~C-h f~ while Amx is active runs ~describe-function~ on the currently
      selected command
    - ~M-.~ jumps to the definition of the selected command
    - ~C-h w~ shows the key bindings for the selected command
    - ~amx-major-mode-commands~ runs Amx limited to commands that are relevant
      to the active major mode.
    - ~amx-show-unbound-commands~ shows frequently used commands that have
      no keybindings.

    #+BEGIN_SRC emacs-lisp
    (use-package amx
      :straight t
      :after (ivy counsel)
      :config
      (amx-mode t))   ; it auto-detects ivy-mode
    #+END_SRC

*** Show the ivy frame other places

    *[DISABLED]*

    *=ivy-posframe=* lets ivy use posframe to show its menu.

    - [[https://github.com/tumashu/ivy-posframe][Github]]

    #+BEGIN_SRC emacs-lisp :tangle no
    (use-package ivy-posframe
      :straight t
      :after (ivy)
    #+END_SRC

*** Add icons to Ivy

    *[DISABLED]*

    Use *=all-the-icons-ivy=* to make it look prettier(?).
    Better? More graphical at least.

    #+BEGIN_SRC emacs-lisp :tangle no
    (use-package all-the-icons-ivy
      :init
      (add-hook 'after-init-hook 'all-the-icons-ivy-setup))
    #+END_SRC


* Personal keybindings

  Make it mine.

** Buffer/window management

   #+BEGIN_SRC emacs-lisp
   (evil-leader/set-key
     "b b" 'counsel-switch-buffer
     "b i" 'ibuffer

     "TAB s" 'persp-switch          ; query a persp to switch to or create
     "TAB n" 'persp-switch
     "TAB c" 'persp-kill            ; query a persp to kill
     "TAB r" 'persp-rename          ; rename current perspective
     "TAB i" 'persp-import          ; import a persp from another frame
     "TAB <right>" 'persp-next      ; switch to next perspective
     "TAB <left>" 'persp-prev       ; switch to previous perspective
     "TAB w" 'persp-state-save      ; save all persps in all frames to a file
     "TAB l" 'persp-state-load      ; load all persps from a file
     "TAB b k" 'persp-remove-buffer ; query a buffer to remove from current persp
     "TAB b a" 'persp-add-buffer    ; query and open buffer to add to current persp
     "TAB b s" 'persp-set-buffer    ; move buffer to current persp
     "TAB b b" 'persp-counsel-switch-buffer ; swicth to buffer filtered by current persp
     )
   #+END_SRC

** Project management

   #+BEGIN_SRC emacs-lisp
   (evil-leader/set-key
     "p" 'projectile-command-map
     )
   #+END_SRC

** Version control

   #+BEGIN_SRC emacs-lisp
   (evil-leader/set-key
     "g" 'magit-status
     )
   #+END_SRC


* Things to check out and eventually add

** Tabs

   - [[https://github.com/manateelazycat/awesome-tab][awesome-tab]]
   - [[https://github.com/ema2159/centaur-tabs][centaur-tabs]] - used by doom emacs

** UI

   - [[https://github.com/zk-phi/sublimity][sublimity]] - code minimap ala Sublime editor
   - [[https://github.com/emacsorphanage/anzu][anzu]] and [[https://github.com/emacsorphanage/evil-anzu][evil-anzu]] to display match count in the modeline
     (e.g. =(13/45)=)
   - [[https://github.com/joostkremers/writeroom-mode][writeroom-mode]] to change the editor into a distraction-free
     editor (for blog posts). [[https://gitlab.com/jabranham/mixed-pitch][mixed-pitch]] to display both variable-
     and fixed-width fonts at the same time would be a good companion.

** Apps within the app

   - [[https://github.com/ralesi/ranger.el][ranger]] - This is a minor mode that runs within dired, it emulates many
              of ranger's features. This minor mode shows a stack of parent
              directories, and updates the parent buffers, while you're navigating
              the file system. The preview window takes some of the ideas from
              Peep-Dired, to display previews for the selected files, in the
              primary dired buffer.
   - [[https://github.com/200ok-ch/counsel-jq][counsel-jq]] - use the =jq= json viewer through =counsel=

** Editor

   - [[https://github.com/iqbalansari/emacs-emojify][emojify]] - better (?) emoji support

** Org Mode

   - [[https://github.com/zweifisch/ob-http][ob-http]] - make http requests in =org-mode=.
               Watch [[https://www.youtube.com/watch?v=tGgat6XJ2tk][Using org-mode as a rest client]] as a demo.


* References

  Helpful things I've found while researching configs.

  - [[https://github.com/emacs-tw/awesome-emacs][Awesome Emacs]] - categorized packages

  - https://jamiecollinson.com/blog/my-emacs-config/
